#!/usr/bin/env cargo
---cargo
package.name = "qubit_prepare"
package.edition = "2024"
---
// [dependencies]
// qubit_device = { path = "../crates/qubit_device", features = ["std"] }
// prettyplease = "0.2.34"
// syn = { version = "2.0.103", features = ["extra-traits", "full", "parsing"] }

//! Generate the included file for a specific model. This runs when the `prepare` tasks executes.
//!
//! DO NOT run this directly! Run `cargo make prepare` to use it.

use std::io::Write;

fn main() {
	let mut args = std::env::args().skip(1);

	let mut author = None;
	let mut model = None;
	let mut custom = None;

	while let Some(arg) = args.next() {
		match arg.as_str() {
			"--author" => {
				author = args.next();
			}
			"--model" => {
				model = args.next();
			}
			"--custom" => {
				custom = args.next();
			}
			_ => {
				eprintln!("Unexpected argument: {}", arg);
				std::process::exit(1);
			}
		}
	}

	let contents = match (author, model, custom) {
		(Some(a), Some(m), None) => {
			let extension = format!(
				r#"
[build]
target = "thumbv6m-none-eabi"

[host]
rustflags = ["--cfg", 'device="import"']

[env]
QUBIT_AUTHOR = "{a}"
QUBIT_MODEL = "{m}"
"#
			);

			extension.into_bytes()
		}
		(None, None, Some(c)) => {
			let extension = format!(
				r#"
[build]
target = "thumbv6m-none-eabi"

[host]
rustflags = ["--cfg", 'device="custom"']

[env]
QUBIT_CONFIG_PATH = "{c}"
"#
			);

			extension.into_bytes()
		}
		_ => {
			eprintln!("Usage: --author <name> --model <name>  OR  --custom <path>");

			std::process::exit(1);
		}
	};

	let cwd = std::env::current_dir().unwrap();
	let toml_path = std::path::Path::new(&cwd).join(".cargo/config-extend.toml");

	let mut file = std::fs::File::create(&toml_path).unwrap();

	writeln!(
		&mut file,
		"# This file is automatically generated and not intended for manual editing."
	)
	.unwrap();

	file.write_all(&contents).unwrap();
}
